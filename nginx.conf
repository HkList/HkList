server
{
    listen 80;
    server_name proxy.example.com;  # 替换为你的域名或IP地址 下面还有日志服务

    location / {
        set $decoded_url "";
        set $target_host "";
        # 设置解密密码
        set $decrypt_password "hklist";

        rewrite_by_lua_block {
            local args = ngx.req.get_uri_args()
            local encode_url = args["url"]
            if not encode_url then
                ngx.header["Content-Type"] = "text/html; charset=utf-8"
                ngx.say("missing url parameter")
                return ngx.exit(400)
            end
            
            -- base64 解码
            local decoded_url = ngx.decode_base64(encode_url)

            if not decoded_url then
                ngx.header["Content-Type"] = "text/html; charset=utf-8"
                ngx.say("invalid base64 data")
                return ngx.exit(400)
            end

            -- XOR 解密函数
            local function xor_decrypt(input, key)
                local output = {}
                local key_len = #key
                for i = 1, #input do
                    local byte = string.byte(input, i)
                    local key_byte = string.byte(key, (i - 1) % key_len + 1)
                    output[i] = string.char(bit.bxor(byte, key_byte))
                end
                return table.concat(output)
            end
            
            -- 使用指定的密码进行 XOR 解密
            local decrypted_data = xor_decrypt(decoded_url, ngx.var.decrypt_password)
            
            -- 解码
            local url = ngx.unescape_uri(decrypted_data)
            
            local decoded_url = url
            local target_host = url:match("^https?://([^/]+)")
            
            if not target_host then
                ngx.header["Content-Type"] = "text/html; charset=utf-8"
                ngx.say("wrong data or password")
                return ngx.exit(403)
            end
            
            if not target_host:match("^[a-zA-Z0-9.-]+%.baidupcs%.com$") then
                ngx.header["Content-Type"] = "text/html; charset=utf-8"
                ngx.say("unallow domain")
                return ngx.exit(403)
            end
            
            ngx.var.decoded_url = decoded_url
            ngx.var.target_host = target_host
        }

        resolver 8.8.8.8 1.1.1.1 valid=300s;
        proxy_pass $decoded_url;
        proxy_ssl_server_name on;
        proxy_set_header Host $target_host;
        proxy_set_header User-Agent $http_user_agent;

        proxy_set_header X-Real-IP "";
        proxy_set_header X-Forwarded-For "";
        proxy_set_header Connection "";
        proxy_set_header Cookie "";

        proxy_buffering off;        # 禁用代理缓冲
        proxy_cache off;            # 禁用缓存（如果不需要缓存的话）
        proxy_max_temp_file_size 0; # 禁用临时文件存储（如果不想使用临时文件）
    }
    
    # 错误日志
    # access_log  /www/wwwlogs/proxy.example.com.log;
    # error_log  /www/wwwlogs/proxy.example.com.log;

    # 下面这行别动 对接了宝塔的SSL
    #error_page 404/404.html;
}